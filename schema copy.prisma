// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  idEmp         Int      @id @default(autoincrement())
  images        Image[]
  fNameEmp      String?
  lNameEmp      String?
  villageEmp    String?
  cityEmp       String?
  Province      String?
  emailEmp      String   @unique
  rankEmp       String?
  empUser       User[]
  dataofEmpment DateTime @default(now())
  UpdateDT      DateTime @updatedAt
}

model User {
  idUs          Int       @id @default(autoincrement())
  username      String    @unique
  password      String?
  role          String    @default("user")
  enabled       Boolean   @default(true)
  orders        Order[]
  carts         Cart[]
  Employee      Employee? @relation(fields: [employeeIdEmp], references: [idEmp], onDelete: Cascade)
  employeeIdEmp Int?
  CcreatedDT    DateTime  @default(now())
  updatedDT     DateTime  @updatedAt
}

model Product {
  idPd                  Int              @id @default(autoincrement())
  qrPd                  String           @unique
  namePd                String
  decriptionPd          String
  orderItems            ProductOnOrder[]
  cartItems             ProductOnCart[]
  images                Image[]
  createdDT             DateTime         @default(now())
  updatedDT             DateTime         @updatedAt
  warehouses_Stock      Warehouses_Stock @relation(fields: [warehouses_StockIdWhs], references: [idWhs], onDelete: Cascade)
  warehouses_StockIdWhs Int
  puachase_Order        PuachaseOrder    @relation(fields: [puachase_OrderIdPo], references: [idPo], onDelete: Cascade)
  puachase_OrderIdPo    Int
  input_Product         InputProduct     @relation(fields: [input_ProductIdInp], references: [idInp], onDelete: Cascade)
  input_ProductIdInp    Int
  Supplier              Supplier?        @relation(fields: [supplierID_Sp], references: [ID_Sp])
  supplierID_Sp         Int?
}

model Warehouses {
  idWh                  Int              @id @default(autoincrement())
  nameWh                String           @unique
  location              String
  Warehouses_Stock      Warehouses_Stock @relation(fields: [warehouses_StockIdWhs], references: [idWhs])
  warehouses_StockIdWhs Int
  createdDT             DateTime         @default(now())
  updatedDT             DateTime         @updatedAt
}

model Warehouses_Stock {
  idWhs          Int          @id @default(autoincrement())
  warehousesName Warehouses[]
  productsItem   Product[]
  quantity       Int
  sold           Int          @default(0)
  createdDT      DateTime     @default(now())
  updatedDT      DateTime     @updatedAt
}

model PuachaseOrder {
  idPo          Int       @id @default(autoincrement())
  quantityPo    Int
  statusPo      String    @default("Not Process")
  createdDT     DateTime  @default(now())
  updatedDT     DateTime  @updatedAt
  Product       Product[]
  Supplier      Supplier? @relation(fields: [supplierID_Sp], references: [ID_Sp])
  supplierID_Sp Int?
}

model InputProduct {
  idInp        Int       @id @default(autoincrement())
  products     Product[]
  quantityPo   Int
  Quantity_Inp Int
  Warning      String?
  createdDT    DateTime  @default(now())
  updatedDT    DateTime  @updatedAt
}

model Cart {
  idCart          Int             @id @default(autoincrement())
  products        ProductOnCart[]
  nameCtm         String
  quantityCart    Int
  nameDriver      String?
  Car_Regis       String?
  orderByuser     User            @relation(fields: [orderByuserIdUs], references: [idUs], onDelete: Cascade)
  orderByuserIdUs Int
  createdDT       DateTime        @default(now())
  updatedDT       DateTime        @updatedAt
}

model ProductOnCart {
  idOnCart    Int     @id @default(autoincrement())
  cart        Cart    @relation(fields: [cartIdCart], references: [idCart], onDelete: Cascade)
  cartIdCart  Int
  product     Product @relation(fields: [productIdPd], references: [idPd], onDelete: Cascade)
  productIdPd Int
  count       Int
}

model Category {
  idCt      Int      @id @default(autoincrement())
  nameCt    String   @unique
  createdDT DateTime @default(now())
  updatedDT DateTime @updatedAt
}

model Unit {
  idUt      Int      @id @default(autoincrement())
  nameUt    String   @unique
  createdDT DateTime @default(now())
  updatedDT DateTime @updatedAt
}

model Order {
  idOr            Int              @id @default(autoincrement())
  products        ProductOnOrder[]
  nameCtm         String
  quantityOr      Int
  nameDriver      String?
  Car_Regis       String?
  orderByuser     User             @relation(fields: [orderByuserIdUs], references: [idUs], onDelete: Cascade)
  orderByuserIdUs Int
  createdDT       DateTime         @default(now())
  updatedDT       DateTime         @updatedAt
}

model ProductOnOrder {
  idOnOr    Int     @id @default(autoincrement())
  products  Product @relation(fields: [productId], references: [idPd], onDelete: Cascade)
  productId Int
  order     Order   @relation(fields: [orderIdOr], references: [idOr], onDelete: Cascade)
  orderIdOr Int
  count     Int
}

model Image {
  idImg         Int      @id @default(autoincrement())
  idasset       String
  idpublic      String
  url           String
  SecureUrl     String
  createdDT     DateTime @default(now())
  updatedDT     DateTime @updatedAt
  product       Product  @relation(fields: [productIdPd], references: [idPd], onDelete: Cascade)
  productIdPd   Int
  employeeImage Employee @relation(fields: [employeeIdEmp], references: [idEmp])
  employeeIdEmp Int
}

model Supplier {
  ID_Sp          Int             @id @default(autoincrement())
  Name_Sp        String
  NumberPhone_Sp String          @unique
  Email_Sp       String          @unique
  Address        String
  puachases      PuachaseOrder[]
  products       Product[]
  createdDT      DateTime        @default(now())
  updatedDT      DateTime        @updatedAt
}
