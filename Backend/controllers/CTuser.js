const prisma = require("../config/prisma");
exports.listUser = async (req, res) => {
  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        username: true,
        role: true,
        employee: {
          select: {
            firstName: true,
            lastName: true,
            position: true,
            email: true,
            phoneNumbers: {
              select: {
                number: true,
              },
            },
          },
        },
      },
    });
    res.send(users);
  } catch (err) {
    console.log(err);
    res.status(500).json({ message: "server error listUser in controller!!!" });
  }
};
exports.ChangeStatus = async (req, res) => {
  try {
    const { id, enabled } = req.body;
    const users = await prisma.user.update({
      where: {
        id: Number(id),
      },
      data: {
        enabled: enabled,
      },
    });

    console.log(id, enabled);
    res.send("Update Status Sueccess");
  } catch (err) {
    console.log(err);
    res.status(500).json({ message: "server error listUser in controller!!!" });
  }
};
exports.ChangeRole = async (req, res) => {
  try {
    const { id, role } = req.body;
    const users = await prisma.user.update({
      where: {
        id: Number(id),
      },
      data: {
        role: role,
      },
    });

    console.log(id, role);
    res.send("Update Status Sueccess");
  } catch (err) {
    console.log(err);
    res.status(500).json({ message: "server error listUser in controller!!!" });
  }
};
exports.userCart = async (req, res) => {
  try {
    const { cart } = req.body; // ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤ req.body.cart ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô Array
    console.log(cart); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cart ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Postman

    const user = await prisma.user.findFirst({
      where: { id: Number(req.user.id) },
    });

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    let cartMap = new Map(); // üî• ‡πÉ‡∏ä‡πâ Map ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    let totalQuantity = 0;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cart ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!Array.isArray(cart)) {
      return res.status(400).json({ message: "Cart is not an array" });
    }

    const { nameCtm, nameDriver, carRegis } = req.body; // nameCtm, nameDriver, carRegis ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô req.body

    for (let item of cart) {
      // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ warehouseStock ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ productId ‡πÅ‡∏•‡∏∞ warehouseId
      const warehouseStock = await prisma.warehouseStock.findFirst({
        where: {
          productId: item.productId,
          warehouseId: item.warehouseId,
          totalQuantity: { gte: item.quantity }, // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏≠
        },
      });

      if (!warehouseStock) {
        return res.status(400).json({
          message: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${item.productId} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠`,
        });
      }

      const key = warehouseStock.id; // ‡πÉ‡∏ä‡πâ warehouseStockId ‡πÄ‡∏õ‡πá‡∏ô Key

      // üî• ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏ö‡∏ß‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
      if (cartMap.has(key)) {
        cartMap.set(key, cartMap.get(key) + item.quantity);
      } else {
        cartMap.set(key, item.quantity);
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° reservedQuantity ‡πÉ‡∏ô warehouseStock
      await prisma.warehouseStock.update({
        where: {
          id: warehouseStock.id,
        },
        data: {
          reservedQuantity: warehouseStock.reservedQuantity + item.quantity, // ‡πÄ‡∏û‡∏¥‡πà‡∏° reservedQuantity ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        },
      });

      totalQuantity += item.quantity;
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Map ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Ç‡∏≠‡∏á cartItems
    let cartItems = Array.from(cartMap, ([warehouseStockId, quantity]) => ({
      warehouseStockId,
      quantity,
    }));

    // üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á Cart ‡∏û‡∏£‡πâ‡∏≠‡∏° CartItem ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    const newCart = await prisma.cart.create({
      data: {
        nameCtm: nameCtm,
        carRegis: carRegis,
        nameDriver: nameDriver,
        items: {
          create: cartItems,
        },
        quantityTot: totalQuantity,
        userId: user.id,
      },
    });

    console.log(newCart);
    res.status(200).json(newCart);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

exports.getUserCart = async (req, res) => {
  try {
    const cart = await prisma.cart.findMany({
      where: {
        userId: Number(req.user.id),
      },
      include: {
        items: {
          include: {
            product: true,
          },
        },
      },
    });
    // console.log(cart);
    res.json({
      // items: cart[0].items,
      // quantity: cart[0].quantityTot,
      cart,
    });
  } catch (err) {
    console.log(err);
    res.status(500).json({ message: "server error listUser in controller!!!" });
  }
};
exports.clearUserCart = async (req, res) => {
  try {
    const { id } = req.params;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ id ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (isNaN(id)) {
      return res.status(400).json({ message: "Cart ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    const cart = await prisma.cart.findFirst({
      where: {
        id: Number(id),
        userId: Number(req.user.id),
      },
      include: {
        items: true, // ‡∏î‡∏∂‡∏á CartItems ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏î reservedQuantity
      },
    });

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (!cart) {
      return res.status(400).json({
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô",
      });
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å CartItem ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï reservedQuantity
    const cartItems = cart.items;
    for (let cartItem of cartItems) {
      const warehouseStock = await prisma.warehouseStock.findUnique({
        where: { id: cartItem.warehouseStockId },
      });

      if (warehouseStock) {
        // ‡∏•‡∏î reservedQuantity ‡πÉ‡∏ô WarehouseStock
        await prisma.warehouseStock.update({
          where: { id: warehouseStock.id },
          data: {
            reservedQuantity:
              warehouseStock.reservedQuantity - cartItem.quantity, // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô reservedQuantity
          },
        });
      }
    }

    // ‡∏•‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const removecart = await prisma.cart.delete({
      where: {
        id: Number(id),
      },
    });

    res.json({
      message: "‡∏•‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
      deletedCart: removecart,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

exports.saveNameCum = async (req, res) => {
  try {
    res.send("hi saveNameCum");
  } catch (err) {
    console.log(err);
    res.status(500).json({ message: "server error listUser in controller!!!" });
  }
};
exports.saveOrder = async (req, res) => {
  try {
    // ‡∏î‡∏∂‡∏á cartId ‡∏à‡∏≤‡∏Å URL params
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ cartId ‡πÉ‡∏ô URL" });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Cart ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
    const cart = await prisma.cart.findUnique({
      where: {
        id: Number(id),
      },
      include: {
        items: true,
      },
    });

    if (!cart) {
      return res.status(404).json({ message: "Cart ‡πÑ‡∏°‡πà‡∏û‡∏ö" });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const user = await prisma.user.findFirst({
      where: { id: Number(req.user.id) },
    });

    if (!user) {
      return res.status(404).json({ message: "User ‡πÑ‡∏°‡πà‡∏û‡∏ö" });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡πÉ‡∏´‡∏°‡πà
    const newOrder = await prisma.order.create({
      data: {
        nameCtm: cart.nameCtm,
        carRegis: cart.carRegis,
        nameDriver: cart.nameDriver,
        userId: user.id,
        quantityTot: cart.quantityTot,
      },
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á OrderItems ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï reservedQuantity ‡πÅ‡∏•‡∏∞ totalQuantity ‡∏Ç‡∏≠‡∏á WarehouseStock
    for (let item of cart.items) {
      await prisma.orderItem.create({
        data: {
          orderId: newOrder.id,
          warehouseStockId: item.warehouseStockId,
          quantity: item.quantity,
        },
      });

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï warehouseStock
      await prisma.warehouseStock.update({
        where: { id: item.warehouseStockId },
        data: {
          reservedQuantity: {
            decrement: item.quantity, // ‡∏•‡∏î reservedQuantity
          },
          totalQuantity: {
            decrement: item.quantity, // ‡∏•‡∏î totalQuantity
          },
        },
      });
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Cart ‡πÅ‡∏•‡∏∞ CartItem
    await prisma.cartItem.deleteMany({ where: { cartId: cart.id } });
    await prisma.cart.delete({ where: { id: cart.id } });

    res.status(200).json({ message: "Order ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};



exports.getOrder = async (req, res) => {
  try {
    const orders = await prisma.order.findMany({
      where: { userId: Number(req.user.id) },
      include: {
        items: {
          include: {
            product: {
              include: {
                product: true,
              },
            },
          },
        },
      },
    });
    if (orders.length === 0) {
      return res.status(400).json({ ok: false, message: "No orders" });
    }
    res.json({ ok: true, orders });
  } catch (err) {
    console.log(err);
    res.status(500).json({ message: "server error listUser in controller!!!" });
  }
};
